// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique @db.VarChar(100)
  phone       String? @unique @db.VarChar(20)
  authCode    String? @db.VarChar(6)
  darkMode    Boolean @default(false)
  language    String  @default("ru-RU") @db.VarChar(10)
  isFirstTime Boolean @default(true)

  incomeSources     IncomeSource[]
  savedFunds        SavedFunds[]
  accumulationFunds AccumulationFunds[]
  monthlyExpenses   MonthlyExpense[]
  purchases         Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IncomeSource {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(100)
  description String? @db.Text
  amount      Float   @db.DoublePrecision

  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId Int

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedFunds {
  id     Int    @id @default(autoincrement())
  source String @db.VarChar(100)
  amount Float  @db.DoublePrecision

  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId Int

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccumulationFunds {
  id      Int   @id @default(autoincrement())
  percent Float @db.DoublePrecision

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model MonthlyExpense {
  id     Int    @id @default(autoincrement())
  title  String @db.VarChar(100)
  amount Float  @db.DoublePrecision

  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId Int

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id       Int    @id @default(autoincrement())
  title    String @db.VarChar(100)
  price    Float  @db.DoublePrecision
  currency String @db.VarChar(3)

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Currency {
  id     Int    @id @default(autoincrement())
  code   String @unique @db.VarChar(3)
  name   String @db.VarChar(100)
  symbol String @db.VarChar(10)

  CurrencyRateTo   CurrencyRate[]   @relation(name: "CurrencyRateTo")
  CurrencyRateFrom CurrencyRate[]   @relation(name: "CurrencyRateFrom")
  IncomeSource     IncomeSource[]
  SavedFunds       SavedFunds[]
  MonthlyExpense   MonthlyExpense[]

  @@index([code])
}

model CurrencyRate {
  id   Int   @id @default(autoincrement())
  rate Float @db.DoublePrecision

  to     Currency @relation(name: "CurrencyRateTo", fields: [toId], references: [id])
  toId   Int
  from   Currency @relation(name: "CurrencyRateFrom", fields: [fromId], references: [id])
  fromId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([toId, fromId])
}
