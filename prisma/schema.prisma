// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int     @id @default(autoincrement())
  email       String  @unique @db.VarChar(100)
  phone       String? @unique @db.VarChar(20)
  authCode    String? @db.VarChar(6)
  darkMode    Boolean @default(false)
  language    String  @default("ru-RU") @db.VarChar(10)
  currency    String  @default("RUB") @db.VarChar(3)
  isFirstTime Boolean @default(true)

  incomes           Incomes[]
  expenses          Expenses[]
  incomeSources     IncomeSources[]
  expenseSources    ExpenseSources[]
  savedFunds        SavedFunds[]
  accumulationFunds AccumulationFunds[]
  goals             Goals[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IncomeSources {
  id     Int    @id @default(autoincrement())
  title  String @db.VarChar(100)
  amount Float  @db.DoublePrecision

  currency   Currencies @relation(fields: [currencyId], references: [id])
  currencyId Int

  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  Incomes Incomes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExpenseSources {
  id     Int    @id @default(autoincrement())
  title  String @db.VarChar(100)
  amount Float  @db.DoublePrecision

  currency   Currencies @relation(fields: [currencyId], references: [id])
  currencyId Int

  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  Expenses Expenses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Incomes {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  amount      Float    @db.DoublePrecision
  dateOfIssue DateTime @default(now())

  savedFund   SavedFunds @relation(fields: [savedFundId], references: [id])
  savedFundId Int

  incomeSource   IncomeSources? @relation(fields: [incomeSourceId], references: [id])
  incomeSourceId Int?

  currency   Currencies @relation(fields: [currencyId], references: [id])
  currencyId Int

  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expenses {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  amount      Float    @db.DoublePrecision
  dateOfIssue DateTime @default(now())

  savedFund   SavedFunds @relation(fields: [savedFundId], references: [id])
  savedFundId Int

  expenseSource   ExpenseSources? @relation(fields: [expenseSourceId], references: [id])
  expenseSourceId Int?

  currency   Currencies @relation(fields: [currencyId], references: [id])
  currencyId Int

  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedFunds {
  id     Int    @id @default(autoincrement())
  source String @db.VarChar(100)
  amount Float  @db.DoublePrecision

  currency   Currencies @relation(fields: [currencyId], references: [id])
  currencyId Int

  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  Incomes  Incomes[]
  Expenses Expenses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccumulationFunds {
  id      Int   @id @default(autoincrement())
  percent Float @db.DoublePrecision

  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Goals {
  id       Int    @id @default(autoincrement())
  title    String @db.VarChar(100)
  price    Float  @db.DoublePrecision
  currency String @db.VarChar(3)

  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Currencies {
  id     Int    @id @default(autoincrement())
  code   String @unique @db.VarChar(3)
  name   String @db.VarChar(100)
  symbol String @db.VarChar(10)

  exchangeRatesTo   ExchangeRates[]  @relation(name: "ExchangeRateTo")
  exchangeRatesFrom ExchangeRates[]  @relation(name: "ExchangeRateFrom")
  incomes           Incomes[]
  expenses          Expenses[]
  incomeSources     IncomeSources[]
  expenseSources    ExpenseSources[]
  savedFunds        SavedFunds[]

  @@index([code])
}

model ExchangeRates {
  id   Int   @id @default(autoincrement())
  rate Float @db.DoublePrecision

  to     Currencies @relation(name: "ExchangeRateTo", fields: [toId], references: [id], onDelete: Cascade)
  toId   Int
  from   Currencies @relation(name: "ExchangeRateFrom", fields: [fromId], references: [id], onDelete: Cascade)
  fromId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([toId, fromId])
}
